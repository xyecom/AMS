//------------------------------------------------------------------------------
//
// 说明： 该文件中的内容是由代码生成器自动生成的，请勿手工修改！
//
// file name：MeasuringUnitAccess.autogenerated.cs
// author: wangzhen
// create date：2011-3-29 16:31:07
//
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using XYECOM.Core.Data;

namespace XYECOM.SQLServer
{
    public partial class MeasuringUnitAccess
    {
		
		/// <summary>
        	/// 根据Id获取实体信息
        	/// </summary>
        	/// <param name="infoId">信息主键Id</param>
        	/// <returns>数据实体对象</returns>
		public XYECOM.Model.MeasuringUnitInfo GetItem(int infoId)
		{
			XYECOM.Model.MeasuringUnitInfo info = null;
			SqlParameter[] parame = new SqlParameter[]
			{
				new SqlParameter("@Id",infoId)
			};
			string sql = "select * from XY_MeasuringUnit where Id = @Id";
			using (SqlDataReader reader = SqlHelper.ExecuteReader(CommandType.Text, sql, parame))
			{
				if (reader.Read())
				{
					info =  new XYECOM.Model.MeasuringUnitInfo();
					info.Id= Core.MyConvert.GetInt32(reader["Id"].ToString());
					info.MeasuringUnitName= reader["MeasuringUnitName"].ToString();
				}
			}
			return info;
		}
		
		/// <summary>
		/// 删除操作(删除单条)
		/// </summary>
		/// <param name="infoId">信息主键Id</param>
		/// <returns>受影响的行数</returns>
		public int Delete(int infoId)
		{
			SqlParameter[] parame = new SqlParameter[]
			{
				new SqlParameter("@Id",infoId)
			};
			string sql = "delete XY_MeasuringUnit where Id = @Id";
			return SqlHelper.ExecuteNonQuery(CommandType.Text, sql,parame);
		}
		

		/// <summary>
		/// 删除操作(删除多条)
		/// </summary>
		/// <param name="infoIds">以逗号隔开的主键Id集合</param>
		/// <returns>受影响的行数</returns>
		public int DeleteByIds(string infoIds)
		{
			string sql = "delete XY_MeasuringUnit where Id in ("+infoIds+")";
			return SqlHelper.ExecuteNonQuery(CommandType.Text, sql,null);
		}
        /// <summary>
        /// 检查是否存在要添加的计量单位
        /// </summary>
        /// <param name="name">计量名称</param>
        /// <returns>true 存在 ，false 不存在</returns>
        public bool CheckUnitNmae(string name)
        {
            string sql =string.Format( "select count(1) from  XY_MeasuringUnit where MeasuringUnitName ='{0}' ",name) ;
            if (XYECOM.Core.MyConvert.GetInt32(SqlHelper.ExecuteScalar(CommandType.Text, sql, null).ToString()) > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

		/// <summary>
		/// 修改操作
		/// </summary>
		/// <param name="info">实体对象</param>
		/// <returns>受影响行数</returns>
		public int Update(XYECOM.Model.MeasuringUnitInfo info)
		{
			SqlParameter[] parame = new SqlParameter[]
			{
				new SqlParameter("@Id",info.Id),
				new SqlParameter("@MeasuringUnitName",info.MeasuringUnitName)	
			};
			
			string sql = "update XY_MeasuringUnit set ";
			sql += "MeasuringUnitName=@MeasuringUnitName";
			sql += " where Id = @Id";
			return  SqlHelper.ExecuteNonQuery(CommandType.Text,sql, parame);
		}		
		
		/// <summary>
		/// 插入操作
		/// </summary>
		/// <param name="info">要插入的实体对象</param>
		/// <returns></returns>
		public int Insert(XYECOM.Model.MeasuringUnitInfo info)
		{
			SqlParameter[] parame = new SqlParameter[]
			{
				new SqlParameter("@MeasuringUnitName",info.MeasuringUnitName)	
			};
			
			string sql = "INSERT INTO XY_MeasuringUnit (";
			sql += "MeasuringUnitName) values (";
			sql += "@MeasuringUnitName)";
			
			return SqlHelper.ExecuteNonQuery(CommandType.Text, sql, parame);
		}
		
		
		/// <summary>
		/// 插入操作
		/// </summary>
		/// <param name="info">要插入的实体对象</param>
		/// <param name="ceInfoid">新增信息的ID</param>
		/// <returns></returns>
		public int Insert(XYECOM.Model.MeasuringUnitInfo info,out int infoId)
		{
			SqlParameter[] parame = new SqlParameter[]
			{
				new SqlParameter("@Id",SqlDbType.Int),
				new SqlParameter("@MeasuringUnitName",info.MeasuringUnitName),
			};
			parame[0].Direction = ParameterDirection.Output;
			string sql = "INSERT INTO XY_MeasuringUnit (";
			sql += "MeasuringUnitName) values (";
			sql += "@MeasuringUnitName);select @Id=ident_current('XY_MeasuringUnit')";
			
			int rowAffected = SqlHelper.ExecuteNonQuery(CommandType.Text, sql, parame);

			if (rowAffected >= 0)
			{
				if (parame[0].Value != null && parame[0].Value.ToString() != "")
					infoId = Core.MyConvert.GetInt32(parame[0].Value.ToString());
				else
					infoId = 0;
			}
			else
			{
				infoId = -1;
			}
			return rowAffected;
		}
		
		
		/// <summary>
		/// 获取多条记录
		/// </summary>
		/// <returns>多条记录</returns>
		public DataTable Select()
		{
			string sql = "select * from XY_MeasuringUnit";
			return SqlHelper.ExecuteTable(sql);
		}
		/*
		/// <summary>
		/// 获取多条记录
		/// </summary>
		/// <param name="pinfo">分页条件</param>
		/// <returns>多条记录</returns>
		public DataTable GetDataTable(XYECOM.Model.PageInfo pagingDescription)
		{			
			string sql = "SELECT * FROM ("+
					"SELECT "+pagingDescription.Columns+", row_number() over(order by "+pagingDescription.OrderStatement+") rownumber"+
					"FROM XY_MeasuringUnit where "+pagingDescription.Condition+") t"+
					"WHERE t.rownumber between "+pagingDescription.PageSize+" * ("+pagingDescription.PageIndex+" - 1) + 1 and  "+pagingDescription.PageSize+" * ("+pagingDescription.PageIndex+" - 1) + "+pagingDescription.PageSize;
			
			DataTable data = new DataTable();
			data = SqlHelper.ExecuteTable(sql);
			pagingDescription.Total = data.Rows.Count;
			return data;
		}
		*/
		//符合条件的总条数
		public int Count(string strWhere)
		{
			string sql = "select count(*) from XY_MeasuringUnit "+strWhere;
        		return (int)SqlHelper.ExecuteScalar(sql);
		}
    }
}
